package symboltable;import syntaxtree.Type;import java.util.Hashtable;import java.util.Enumeration;import java.util.Vector;public class RamMethod {    String id;    Type type;    Vector<RamVariable> params;    Hashtable<String, RamVariable> vars;    public RamMethod(String id, Type type) {        this.id = id;        this.type = type;        vars = new Hashtable<String, RamVariable>();        params = new Vector<RamVariable>();    }    public String getId() {        return id;    }    public Type type() {        return type;    }    public boolean addParam(String id, Type type) {        if (containsParam(id)) {            return false;        } else {            params.addElement(new RamVariable(id, type));            return true;        }    }    public Enumeration getParams() {        return params.elements();    }    public RamVariable getParamAt(int i) {        if (i < params.size()) {            return (RamVariable) params.elementAt(i);        } else {            return null;        }    }        public int numParams() {        return params.size();    }    public boolean addVar(String id, Type type) {        if (vars.containsKey(id)) {            return false;        } else {            vars.put(id, new RamVariable(id, type));            return true;        }    }    public boolean containsVar(String id) {        return vars.containsKey(id);    }    public boolean containsParam(String id) {        for (int i = 0; i < params.size(); i++) {            if (((RamVariable) params.elementAt(i)).id.equals(id)) {                return true;            }        }        return false;    }    public RamVariable getVar(String id) {        if (containsVar(id)) {            return (RamVariable) vars.get(id);        } else {            return null;        }    }    public RamVariable getParam(String id) {        for (int i = 0; i < params.size(); i++) {            if (((RamVariable) params.elementAt(i)).id.equals(id)) {                return (RamVariable) (params.elementAt(i));            }        }        return null;    }            public String toString()     {	StringBuffer sb = new StringBuffer("            " + type.getClass() + " " + id);	sb.append("\n                Params:\n");	for (Enumeration e = params.elements(); e.hasMoreElements(); )	    sb.append("                    " + e.nextElement().toString() + "\n");	sb.append("                Locals:\n");	for (Enumeration e = vars.keys(); e.hasMoreElements(); )	    sb.append("                    " 		      + vars.get(e.nextElement()).toString() + "\n");	return sb.toString();    }    } // Method